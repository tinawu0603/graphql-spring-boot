/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 oEmbedler Inc. and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "org.springframework.boot" version "$LIB_SPRING_BOOT_VER" apply false
//    id "org.sonarqube" version "$PLUGIN_SONARQUBE_VER"
    id "jacoco"
    id 'maven-publish'
//    id "io.github.gradle-nexus.publish-plugin" version "$PLUGIN_NEXUS_PUBLISH_VER"
}

//sonarqube {
//    properties {
//        property "sonar.projectKey", "graphql-java-kickstart_graphql-spring-boot"
//        property "sonar.organization", "graphql-java-kickstart"
//        property "sonar.host.url", "https://sonarcloud.io"
//    }
//}

def bomProjectName = "graphql-spring-boot-dependencies"

subprojects {
    apply plugin: 'idea'
    if (it.name != bomProjectName) {
        apply plugin: 'jacoco'
//        apply plugin: 'org.sonarqube'
        apply plugin: 'java'
        apply plugin: 'java-library'
        apply plugin: "io.spring.dependency-management"
    }
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    ext['graphql-java.version'] = '19.1'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local" }
    }

    if (it.name != bomProjectName) {
        dependencyManagement {
            imports {
                mavenBom "org.springframework.boot:spring-boot-starter-parent:$LIB_SPRING_BOOT_VER"
            }
        }

        dependencies {
            compileOnly "org.projectlombok:lombok"
            annotationProcessor "org.projectlombok:lombok"

            testCompileOnly "org.projectlombok:lombok"
            testAnnotationProcessor "org.projectlombok:lombok"
        }

        test {
            useJUnitPlatform()
            testLogging {
                events TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
                showCauses true
                showExceptions true
                showStackTraces true
            }
        }

        jacoco {
            toolVersion = "$PLUGIN_JACOCO_VER"
        }

        jacocoTestReport {
            reports {
                xml.required = true
                html.required = false
                csv.required = false
            }
        }

        idea {
            module {
                downloadJavadoc = true
                downloadSources = true
            }
        }

        compileJava {
            sourceCompatibility = SOURCE_COMPATIBILITY
            targetCompatibility = TARGET_COMPATIBILITY
        }

        compileJava.dependsOn(processResources)
    }

    //disable Gradle Metadata generation as it may cause unwanted side effects
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    if (it.name != bomProjectName) {
        jar {
            from "LICENSE.md"
        }

        java {
            withSourcesJar()
            withJavadocJar()
        }
    }

    if (!version.toString().endsWith('-SNAPSHOT')) {
        ext["signing.keyId"] = System.env.SIGNING_KEY_ID
        ext["signing.password"] = System.env.SIGNING_PASSWORD
        ext["signing.secretKeyRingFile"] = System.env.SIGNING_SECRET_KEY_RING_FILE

        signing {
            sign publishing.publications
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                if (project.name != bomProjectName) {
                    version version
                    from components.java
                }

                // to avoid "Publication only contains dependencies and/or constraints without a version" error
                // see https://docs.gradle.org/6.2.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = PROJECT_NAME
                    description = PROJECT_DESC
                    url = PROJECT_GIT_REPO_URL
                    scm {
                        url = PROJECT_GIT_REPO_URL
                        connection = PROJECT_GIT_REPO_URL
                        developerConnection = PROJECT_GIT_REPO_URL
                    }
                    licenses {
                        license {
                            name = PROJECT_LICENSE
                            url = PROJECT_LICENSE_URL
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'oliemansm'
                            name = 'Michiel Oliemans'
                        }
                        developer {
                            id = 'apottere'
                            name = 'Andrew Porter'
                        }
                    }
                }
            }
        }
    }
}

//nexusPublishing {
//    repositories {
//        sonatype {
//            username = System.env.OSS_USER_TOKEN_KEY ?: project.findProperty('OSS_USER_TOKEN_KEY') ?: ''
//            password = System.env.OSS_USER_TOKEN_PASS ?: project.findProperty('OSS_USER_TOKEN_PASS') ?: ''
//        }
//    }
//}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
